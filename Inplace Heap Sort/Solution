public class Solution {
    
	// Function to heapify a subtree rooted at node i
    // n is the size of the heap
    private static void heapify(int[] arr, int n, int i) {
        int smallest = i; // Initialize smallest as root
        int left = 2 * i + 1; // Left child
        int right = 2 * i + 2; // Right child

        // If left child is smaller than the root
        if (left < n && arr[left] < arr[smallest]) {
            smallest = left;
        }

        // If right child is smaller than the smallest so far
        if (right < n && arr[right] < arr[smallest]) {
            smallest = right;
        }

        // If the smallest is not root
        if (smallest != i) {
            // Swap the root with the smallest child
            int temp = arr[i];
            arr[i] = arr[smallest];
            arr[smallest] = temp;

            // Recursively heapify the affected subtree
            heapify(arr, n, smallest);
        }
    }
	public static void inplaceHeapSort(int arr[]) {
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Change in the given input itself.
		* Taking input and printing output is handled automatically.
		*/
		
		// Function to perform heap sort in decreasing order
        int n = arr.length;

        // Step 1: Build a min-heap
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }

        // Step 2: Extract elements from the heap one by one
        for (int i = n - 1; i >= 0; i--) {
            // Swap the root (smallest element) with the last element
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Heapify the reduced heap to maintain the min-heap property
            heapify(arr, i, 0);
        }
	}
}
