/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    // function to merge two sorted linked list 
    public static Node<Integer> mergeTwoSorteds(Node<Integer> head1, Node<Integer> head2) {
        //Your code goes here

        // checking if either of the linked list are null 
        if(head1 == null){
            return head2;
        }
        if(head2 == null){
            return head1;
        }

        // creating head and tail references 
        Node<Integer> head=null, tail=null;

        // creating two pointers for two lists 
        Node<Integer> t1=head1, t2=head2;

        // deciding head 
        if(t1.data<t2.data){
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        else{
            head=t2;
            tail=t2;
            t2=t2.next;
        }

        // looping till one of the list is over 
        while(t1 != null && t2!=null){
            if(t1.data<t2.data){
                tail.next = t1;
                tail=t1;
                t1=t1.next;
            }
            else{
                tail.next = t2;
                tail=t2;
                t2=t2.next;
            }
        }

        // checking for remaining list 
        if(t1!=null){
            tail.next=t1;
        }
        else{
            tail.next=t2;
        }

        // returning head 
        return head;
    }

    // function to find midpoint 
    public static Node<Integer> midPoint(Node<Integer> head) {
        //Your code goes here

        // using fast and slow pointers to traverse the LL in order to find midpoint 
        Node<Integer> slow = head;
        Node<Integer> fast = head;

        if(head==null || head.next==null){
            return head;
        }

        while(fast.next != null && fast.next.next != null){
            slow=slow.next;
            fast=fast.next.next;
        }

        return slow;
    }

	public static Node<Integer> mergeSort(Node<Integer> head) {
		//Your code goes here

        // base case 
        if(head==null || head.next == null){
            return head;
        }

        // splitting linked list into two parts - finding the mid 
        Node<Integer> mid = midPoint(head);
        Node<Integer> secondHead = mid.next;
        mid.next = null; //most imp breaking the link

        // calling merge sort on divided lists 
        Node<Integer> head1 = mergeSort(head);
        Node<Integer> head2 = mergeSort(secondHead);

        // merging sorted lists 
        head = mergeTwoSorteds(head1, head2);
       
        // returning head 
        return head;
	}

}
