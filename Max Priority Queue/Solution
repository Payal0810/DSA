import java.util.ArrayList;

public class PQ {
	// Complete this class
	ArrayList<Integer> heap = new ArrayList<>();
	boolean isEmpty() {
		// Implement the isEmpty() function here
		
		return getSize()==0;
	
	}

	int getSize() {
		// Implement the getSize() function here
		return heap.size();
	}

	int getMax() {
		// Implement the getMax() function here
		if(getSize()==0){
			return Integer.MIN_VALUE;
		}
		return heap.get(0);
	}

	void insert(int element) {
		// Implement the insert() function here

		// first inser at last index 
		heap.add(element);

		// now find its parent index and child index
		int childIndex = heap.size()-1;
		int parentIndex = (childIndex-1)/2;


		while(childIndex>0){
			// checking if child index is greater than parent 
			if(heap.get(childIndex)>heap.get(parentIndex)){
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				// update parent and child index 
			childIndex = parentIndex;
            parentIndex = (childIndex-1)/2;
			}
            else{
				return;
			}
			
		}
	}

	int removeMax() {
		// Implement the removeMax() function here

		int removed = heap.get(0);
		
		// set first element with last element 
		heap.set(0, heap.get(heap.size()-1));

		// now remove last element 
		heap.remove(heap.size()-1);

		// setting parent element to first element 
		int parentIndex = 0;

		// finding its child elements 
		int leftIndex = 2*parentIndex+1;
		int rightIndex = 2*parentIndex+2;

		while(leftIndex<heap.size()){

			// by default making parent element as max index 
			int maxIndex = parentIndex;

			// finding max element among parent and child 
			if(heap.get(leftIndex) > heap.get(parentIndex)){
				maxIndex = leftIndex;
			}
			if(rightIndex<heap.size() && (heap.get(rightIndex) > heap.get(maxIndex))){
				maxIndex = rightIndex;
			}

			// if max index and parent are same then we are at correct index 
			if(maxIndex == parentIndex){
				break;
			}
            
			// Swap parent and the greater child
            int temp = heap.get(parentIndex);
            heap.set(parentIndex, heap.get(maxIndex));
            heap.set(maxIndex, temp); 

			// updating parent and child 
			parentIndex = maxIndex;
			leftIndex = 2*parentIndex+1;
		    rightIndex = 2*parentIndex+2;
		}

		return removed;
	}
}
