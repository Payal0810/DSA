import java.util.LinkedList;
import java.util.Queue;
public class Stack {

    //Define the data members
    Queue<Integer> q1;
    Queue<Integer> q2;
    int size;

    public Stack() {
        //Implement the Constructor
        q1 = new LinkedList<Integer>();
        q2 = new LinkedList<Integer>();
        size = 0;
    }



    /*----------------- Public Functions of Stack -----------------*/


    public int getSize() { 
        //Implement the getSize() function
        return size;
    }

    public boolean isEmpty() {
        //Implement the isEmpty() function
        return size==0;
    }

    public void push(int element) {
        //Implement the push(element) function
        q1.add(element);
        size++;
    }

    public int pop() {
        //Implement the pop() function
        if(q1.size()==0){
            return -1;
        }

        // to get the top of stack we need to trasfer all elements of q1 to q2 except the last one
        while(q1.size()>1){
            q2.add(q1.poll());
        }

        int popElem = q1.poll();
        size--;

        // swapping queues to go back to original 
        Queue temp = q1;
        q1 = q2;
        q2 = temp;

        return popElem;
    }

    public int top() {
        //Implement the top() function

        if(q1.size()==0){
            return -1;
        }

        // transffering all elements of q1 to q2 
        while(q1.size()>1){
            q2.add(q1.poll());
        }

        // last element in q1 is top of the stack 
        int top = q1.poll();

         // Add the top element back to q2
        q2.add(top);

         // swapping queues to go back to original 
        Queue temp = q1;
        q1 = q2;
        q2 = temp;

        return top;

    }
}
