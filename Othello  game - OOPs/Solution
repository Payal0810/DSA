/*******************
 * Main function that we are using internally -  

final static int player1Symbol = 1;
final static int player2Symbol = 2;

public static void main(String[] args) {
	OthelloBoard b = new OthelloBoard();
	int n = s.nextInt();
	boolean p1Turn = true;
	while(n > 0) {
		int x = s.nextInt();
		int y = s.nextInt();
		boolean ans = false;
		if(p1Turn) {
			ans = b.move(player1Symbol, x, y);
		}
		else {
			ans = b.move(player2Symbol, x, y);
		}
		if(ans) {
			b.print();
			p1Turn = !p1Turn;
			n--;
		}
		else {
			System.out.println(ans);
		}
	}
}
*****************/

public class OthelloBoard {

    private int board[][];
    final static int player1Symbol = 1;
    final static int player2Symbol = 2;

    public OthelloBoard() {
        board = new int[8][8];
        board[3][3] = player1Symbol;
        board[3][4] = player2Symbol;
        board[4][3] = player2Symbol;
        board[4][4] = player1Symbol;
    }

    public void print() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public boolean move(int symbol, int x, int y) {
        boolean isValid = false; // to see if the move is valid

        // check if coordinates are within bounds
        if (x < 0 || x >= 8 || y < 0 || y >= 8 || board[x][y] != 0) {
            return isValid;
        }

        // checking for conversion in all 8 directions
        int[] xDir = {-1, -1, 0, 1, 1, 1, 0, -1};
        int[] yDir = {0, 1, 1, 1, 0, -1, -1, -1};

        for (int i = 0; i < 8; i++) {

            int xStep = x + xDir[i];
            int yStep = y + yDir[i];

            int count = 0; // to keep check of opponents tiles

            int opponent;

            // checking for opponents symbol
            if (symbol == player1Symbol) {
                opponent = player2Symbol;
            } else {
                opponent = player1Symbol;
            }

            // keep tracking in single direction
            while (xStep >= 0 && xStep < 8 && yStep >= 0 && yStep < 8 && board[xStep][yStep] == opponent) {
                xStep += xDir[i];
                yStep += yDir[i];
                count++;
            }

            // checking whether coordinates are within bounds, count is not zero, and to see if the last tile is of current players
            if (count > 0 && xStep >= 0 && xStep < 8 && yStep >= 0 && yStep < 8 && board[xStep][yStep] == symbol) {

                // it means move is valid
                isValid = true;

                // resetting coordinates to starting position
                xStep = x + xDir[i];
                yStep = y + yDir[i];

                // start flipping opponents tiles
                while (count > 0) {

                    // make a move
                    board[xStep][yStep] = symbol;

                    // decreasing count
                    count--;

                    // increasing in continuous direction
                    xStep += xDir[i];
                    yStep += yDir[i];
                }
            }
        }

        if (isValid) {
            board[x][y] = symbol; // place the player's symbol at the specified position
        }

        return isValid;
    }
}
