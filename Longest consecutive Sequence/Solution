import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        

		// edge case 
		if(arr.length==0){
			return new ArrayList<>();
		}

		// creating a hash map 
		HashMap<Integer, Boolean> map = new HashMap<>();

		// traversing through array and adding values in hash map 
		for(int i : arr){
			map.put(i, true);
		}
        

		int start=0;
		int maximum = 0;

		// checking for predecessor 
		for(int i : arr){
			if(map.containsKey(i-1)){
				map.put(i, false); //this means it is not the start
			}
		}

        // now checking for longest subsequence 
		for(int i : arr){

			if(map.get(i)){
				// this means it is start 

				int currNum = i;
				int currLength = 1;

				// increament till consecutive elements are present 
				while(map.containsKey(currNum+1)){
					currLength++;
					currNum++;
				}

				// checking if current sequence is greater 
				if(currLength>maximum){
					maximum = currLength;
					start = i;
				}
			}

			
		}

		// output arraylist 
		ArrayList<Integer> op = new ArrayList<>();

		op.add(start);

		// checking if length is greater than 1 
		if(maximum>1){
			// add end index of sequence 
			op.add(start+maximum-1);
		}

		return op;

		}

    }
