/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    public static Node<Integer> mergeTwoSorteds(Node<Integer> head1, Node<Integer> head2) {
        //Your code goes here

        // checking if either of the linked list are null 
        if(head1 == null){
            return head2;
        }
        if(head2 == null){
            return head1;
        }

        // creating head and tail references 
        Node<Integer> head=null, tail=null;

        // creating two pointers for two lists 
        Node<Integer> t1=head1, t2=head2;

        // deciding head 
        if(t1.data<t2.data){
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        else{
            head=t2;
            tail=t2;
            t2=t2.next;
        }

        // looping till one of the list is over 
        while(t1 != null && t2!=null){
            if(t1.data<t2.data){
                tail.next = t1;
                tail=t1;
                t1=t1.next;
            }
            else{
                tail.next = t2;
                tail=t2;
                t2=t2.next;
            }
        }

        // checking for remaining list 
        if(t1!=null){
            tail.next=t1;
        }
        else{
            tail.next=t2;
        }

        // returning head 
        return head;
    }

}
