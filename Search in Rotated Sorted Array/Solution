class Solution {
    public int search(int[] nums, int target) {

        
        // lets try solving this problem using advanced version of binary search 
        int l = 0;
        int r = nums.length-1;

        while(l<=r){
            int mid = (l+r)/2;

            if(target == nums[mid]){
                return mid;
            }
            else if(nums[l]<=nums[mid]){ // means left subpart is sorted
                // now we will check whether target is present between start and mid, if not then it is present in right subpart
                if(target>=nums[l] && target<nums[mid]){
                    r = mid-1;
                }
                else{
                    l = mid+1;
                }
            }
            else{ //otherwise right subpart is sorted
                // now we will check whether target is present between mid and end, if not then it is present in left subpart
                if(target>nums[mid] && target<=nums[r]){
                    l = mid+1;
                }
                else{
                    r = mid-1;
                }
            }
        }
        return -1;
    }
}
