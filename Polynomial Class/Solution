
// /* Signature of four required functions is given in the code. You can create other functions as well if you need.
// *  Also you should submit your code even if you are not done with all the functions. 
// */

// // Main used internally is shown here just for your reference.
// /*public static void main(String[] args) {
// 		Scanner s = new Scanner(System.in);
// 		int n = s.nextInt();
// 		int degree1[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			degree1[i] = s.nextInt();
// 		}
// 		int coeff1[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			coeff1[i] = s.nextInt();
// 		}
// 		Polynomial first = new Polynomial();
// 		for(int i = 0; i < n; i++){
// 			first.setCoefficient(degree1[i],coeff1[i]);
// 		}
// 		n = s.nextInt();
// 		int degree2[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			degree2[i] = s.nextInt();
// 		}
// 		 int coeff2[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			coeff2[i] = s.nextInt();
// 		}
// 		Polynomial second = new Polynomial();
// 		for(int i = 0; i < n; i++){
// 			second.setCoefficient(degree2[i],coeff2[i]);
// 		}
// 		int choice = s.nextInt();
// 		Polynomial result;
// 		switch(choice){
// 		// Add
// 		case 1: 
// 			 result = first.add(second);
// 			result.print();
// 			break;
// 		// Subtract	
// 		case 2 :
// 			 result = first.subtract(second);
// 			result.print();
// 			break;
// 		// Multiply
// 		case 3 :
// 			 result = first.multiply(second);
// 			result.print();
// 			break;
// 		}

// 	}
//   */


// public class Polynomial {

	
// 	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
// 	 *  then corresponding term with specified degree and value is added int the polynomial. If the degree
// 	 *  is already present in the polynomial then previous coefficient is replaced by
// 	 *  new coefficient value passed as function argument
// 	*/

// 	// creating reference for polynomial array 
// 	public int[] degCof;

// 	// constructor for creating array 
// 	public Polynomial(){
// 		degCof = new int[10];
// 	}

// 	public void setCoefficient(int degree, int coeff){

// 		// first we will check whether degree is available in current array index 4
// 		if(degree>=degCof.length){
// 			int[] newArr = new int[degree+1];

// 			// copying elements of old array into the new one 
// 			for(int i=0; i<degree; i++){
// 				newArr[i]=degCof[i];
// 			}
            
// 			degCof=newArr;
// 			// now putting coefficient at its correct degree index 
// 			degCof[degree] = coeff;
// 		}
// 	}
	
// 	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
// 	public void print(){
		
// 		// looping through array 
// 		for(int i=0; i<degCof.length; i++){

// 			// checking for non-zero coefficient
// 			if(degCof[i]!=0){
// 				System.out.print(degCof[i]+"x"+i+" ");
// 			}
// 		}
// 	}

	
// 	// Adds two polynomials and returns a new polynomial which has result
// 	public Polynomial add(Polynomial p){

// 		// first creating the resultant polynomial 
// 		Polynomial result = new Polynomial();

// 		// finding out the maximum degree 
// 		int max = Math.max(this.degCof.length, p.degCof.length);

// 		// looping till max to add 
// 		for(int i=0; i<=max; i++){

// 			int sum = this.degCof[i] + p.degCof[i];

// 			// checking for non-zero coefficient
// 			if(sum!=0){

// 				// setting coefficient to its correct degree 
// 				result.setCoefficient(i, sum);
// 			}
// 		}

// 		return result;
// 	}
	
// 	// Subtracts two polynomials and returns a new polynomial which has result
// 	public Polynomial subtract(Polynomial p){
			
// 		// first creating the resultant polynomial 
// 		Polynomial result = new Polynomial();

// 		// finding out the maximum degree 
// 		int max = Math.max(this.degCof.length, p.degCof.length);

// 		// looping till max to add 
// 		for(int i=0; i<=max; i++){

// 			int sum = this.degCof[i] - p.degCof[i];

// 			// checking for non-zero coefficient
// 			if(sum!=0){

// 				// setting coefficient to its correct degree 
// 				result.setCoefficient(i, sum);
// 			}
// 		}

// 		return result;
// 	}
	
// 	// Multiply two polynomials and returns a new polynomial which has result
// 	public Polynomial multiply(Polynomial p){
		
// 		// first creating the resultant polynomial 
// 		Polynomial result = new Polynomial();

// 		// finding out the maximum degree 
// 		int max = Math.max(this.degCof.length, p.degCof.length);

// 		// looping till max to add 
// 		for(int i=0; i<=max; i++){

// 			int sum = this.degCof[i] * p.degCof[i];

// 			// checking for non-zero coefficient
// 			if(sum!=0){

// 				// setting coefficient to its correct degree 
// 				result.setCoefficient(i, sum);
// 			}
// 		}

// 		return result;
// 	}

// }
import java.util.Scanner;
public class Polynomial {

	 public int degree[]=new int[200];
	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
	public void setCoefficient(int degree, int coeff){
     this.degree[degree]=coeff;
		
	}
	
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
	public void print(){
		for(int i=0;i<200;i++)
        {
            if(degree[i]!=0)
                System.out.print(degree[i] +  "x" + (i)+ " ");
        }
	}

	
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p){
    for(int i=0;i<200;i++)
    {
        this.degree[i]=this.degree[i] + p.degree[i];
    }
        return this;
		
	}
	
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p){
			 for(int i=0;i<200;i++)
             {
                 this.degree[i]=this.degree[i]-p.degree[i];
             }
        return this;
	}
	
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p){
		 int x[]=new int[200];
        for(int i=0;i<200;i++)
        {
            for(int j=0;j<200;j++)
            {
                    int deg=(i) + (j);
                if(deg<200)
                {
                    x[deg]+=this.degree[i]*p.degree[j];
                }
            }
        }
        for(int i=0;i<200;i++)
            this.degree[i]=x[i];
          return this;
	}

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}

}
