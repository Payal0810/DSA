/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

    // Class to store height and diameter
    public static class Node {
        int height;
        int diameter;

        // Constructor
        public Node(int height, int diameter) {
            this.height = height;
            this.diameter = diameter;
        }
    }

    // Helper method to calculate height and diameter
    public static Node helper(BinaryTreeNode<Integer> root) {
        // Base case
        if (root == null) {
            return new Node(0, 0);
        }

        // Recursive call for left and right subtrees
        Node leftAns = helper(root.left);
        Node rightAns = helper(root.right);

        // Current node's height
        int currHeight = 1 + Math.max(leftAns.height, rightAns.height);

        // Diameter through root
        int diaRoot = leftAns.height + rightAns.height + 1;

        // Current diameter
        int currDiameter = Math.max(diaRoot, Math.max(leftAns.diameter, rightAns.diameter));

        return new Node(currHeight, currDiameter);
    }

	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root){
		//Your code goes here

		// Call the helper function and return the diameter
        Node result = helper(root);
        return result.diameter;
	}
	
}
