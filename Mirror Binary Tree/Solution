/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void mirrorBinaryTree(BinaryTreeNode<Integer> root){
		//Your code goes here

		// base case 
		if(root == null){
			return;
		}

		if(root.left == null && root.right==null){
			return;
		}

        // swapping tree childs 
		BinaryTreeNode<Integer> temp = root.left;
		root.left = root.right;
		root.right = temp;

		// recursive call 
		mirrorBinaryTree(root.right);
		mirrorBinaryTree(root.left);
	}
	
}
